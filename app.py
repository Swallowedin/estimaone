import streamlit as st
import os
from openai import OpenAI
import json
import logging
from logging.handlers import RotatingFileHandler
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from typing import Tuple, Dict, Any
import importlib.util
from collections import Counter, defaultdict
import time
from datetime import datetime, timedelta
import threading
import random

# Constantes pour le rate limiting global
MAX_GLOBAL_REQUESTS = 100  # Maximum de requ√™tes globales
RESET_INTERVAL = 600     # 10 minutes en secondes

def display_analysis_summary(question: str, detailed_analysis: str):
    """
    Affiche un r√©sum√© de l'analyse en termes accessibles aux non-juristes
    """
    st.info(f"""
    üìã Notre compr√©hension de votre situation :
    
    {detailed_analysis}
    
    Sur la base de cette analyse, nous allons maintenant vous proposer une estimation adapt√©e √† votre situation.
    """)

def check_global_limit() -> Tuple[bool, int]:
    """
    V√©rifie la limite globale de requ√™tes
    Retourne (peut_continuer, requetes_restantes)
    """
    current_time = time.time()

    # Initialisation des variables globales si n√©cessaires
    if 'global_request_count' not in st.session_state:
        st.session_state.global_request_count = 0
    if 'last_reset_time' not in st.session_state:
        st.session_state.last_reset_time = current_time

    # V√©rifier si on doit r√©initialiser le compteur
    if current_time - st.session_state.last_reset_time > RESET_INTERVAL:
        st.session_state.global_request_count = 0
        st.session_state.last_reset_time = current_time

    # V√©rifier si on a atteint la limite
    if st.session_state.global_request_count >= MAX_GLOBAL_REQUESTS:
        time_until_reset = RESET_INTERVAL - (current_time - st.session_state.last_reset_time)
        minutes_left = int(time_until_reset / 60)
        return False, minutes_left

    # Incr√©menter le compteur
    st.session_state.global_request_count += 1
    return True, MAX_GLOBAL_REQUESTS - st.session_state.global_request_count

def get_session_id():
    """Obtient ou cr√©e un ID de session unique"""
    if 'session_id' not in st.session_state:
        st.session_state.session_id = str(time.time())
    return st.session_state.session_id

class SimpleRateLimiter:
    def __init__(self, max_requests=3, time_window_minutes=5):
        self.max_requests = max_requests
        self.time_window = timedelta(minutes=time_window_minutes)
        self.requests = defaultdict(list)

    def check_limit(self, session_id: str) -> Tuple[bool, int]:
        """
        V√©rifie si la limite est atteinte
        Retourne (peut_continuer, temps_attente_en_minutes)
        """
        if 'requests' not in st.session_state:
            st.session_state.requests = []

        current_time = datetime.now()
        cutoff_time = current_time - self.time_window
        
        # Nettoyer les anciennes requ√™tes
        st.session_state.requests = [
            time for time in st.session_state.requests
            if time > cutoff_time
        ]
        
        if len(st.session_state.requests) >= self.max_requests:
            # Calculer le temps restant avant la prochaine utilisation possible
            if st.session_state.requests:
                temps_attente = max(0, (st.session_state.requests[0] + self.time_window - current_time).seconds // 60)
                return False, temps_attente
            return False, self.time_window.seconds // 60
            
        # Ajouter la nouvelle requ√™te
        st.session_state.requests.append(current_time)
        return True, 0

# Cr√©er l'instance globale du rate limiter
rate_limiter = SimpleRateLimiter(max_requests=3, time_window_minutes=5)

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Ajout d'un handler pour √©crire dans un fichier
file_handler = RotatingFileHandler('app.log', maxBytes=10000, backupCount=5)
file_handler.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)
logger.addHandler(file_handler)

def timeout_handler(func, timeout_seconds=30):
    """
    Ex√©cute une fonction avec un timeout en utilisant threading
    """
    result = [None]
    error = [None]
    
    def worker():
        try:
            result[0] = func()
        except Exception as e:
            error[0] = e
    
    thread = threading.Thread(target=worker)
    thread.daemon = True
    thread.start()
    thread.join(timeout=timeout_seconds)
    
    if thread.is_alive():
        logger.error(f"Timeout lors de l'ex√©cution de {func.__name__}")
        return None, True
        
    if error[0] is not None:
        logger.error(f"Erreur lors de l'ex√©cution de {func.__name__}: {str(error[0])}")
        return None, True
        
    return result[0], False

def execute_with_timeout(func, *args, timeout_seconds=30):
    """
    Wrapper pour ex√©cuter une fonction avec des arguments et un timeout
    """
    def wrapped_func():
        return func(*args)
    return timeout_handler(wrapped_func, timeout_seconds)

def log_question(question: str, client_type: str, urgency: str, estimation: dict = None):
    """
    Journalise une question avec l'estimation si disponible
    """
    if estimation:
        log_message = f"""
Nouvelle question pos√©e :
Client : {client_type}
Urgence : {urgency}
Question : {question}

Estimation : {estimation['forfait']}‚Ç¨ HT
Domaine : {estimation['domaine']}
Prestation : {estimation['prestation']}
"""
    else:
        log_message = f"""
Nouvelle question pos√©e :
Client : {client_type}
Urgence : {urgency}
Question : {question}
"""
    
    logger.info(log_message)
    
    # Envoi de l'email avec les secrets Streamlit
    subject = "Nouvelle question pos√©e sur Estim'IA"
    to_email = st.secrets["EMAIL_TO"]
    send_log_email(subject, log_message, to_email)

st.set_page_config(page_title="Estim'IA - Obtenez une estimation gr√¢ce √† l'IA", page_icon="‚öñÔ∏è", layout="wide")

# Fonction pour envoyer des emails
def send_log_email(subject, body, to_email):
    from_email = os.getenv('EMAIL_FROM')
    password = os.getenv('EMAIL_PASSWORD')

    msg = MIMEMultipart()
    msg['From'] = from_email
    msg['To'] = to_email
    msg['Subject'] = subject
    msg.attach(MIMEText(body, 'plain'))

    try:
        with smtplib.SMTP('smtp.gmail.com', 587) as server:  # Ajustez selon votre fournisseur d'email
            server.starttls()
            server.login(from_email, password)
            server.send_message(msg)
        logger.info(f"Log email sent to {to_email}")
    except Exception as e:
        logger.error(f"Failed to send log email: {str(e)}")

# Fonction pour appliquer le CSS personnalis√©
def apply_custom_css():
    st.markdown("""
        <style>
            #MainMenu {visibility: hidden;}
            footer {visibility: hidden;}
            header {visibility: hidden;}
            .stApp > header {
                background-color: transparent;
            }
            .stApp {
                margin-top: -80px;
            }
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
            .loading-icon {
                animation: spin 1s linear infinite;
                display: inline-block;
                margin-right: 10px;
            }
        </style>
    """, unsafe_allow_html=True)

# Configuration du client OpenAI
OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
if not OPENAI_API_KEY:
    raise ValueError("OPENAI_API_KEY n'est pas d√©fini dans les variables d'environnement")

client = OpenAI(api_key=OPENAI_API_KEY)

# Chargement des modules
def load_py_module(file_path: str, module_name: str):
    try:
        spec = importlib.util.spec_from_file_location(module_name, file_path)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        return module
    except Exception as e:
        logger.error(f"Erreur lors du chargement du module {module_name}: {e}")
        return None

# Chargement des modules personnalis√©s
prestations_module = load_py_module('./prestations.py', 'prestations')
instructions_module = load_py_module('./chatbot-instructions.py', 'consignes_chatbot')

# Initialisation des variables globales
prestations = prestations_module.get_prestations() if prestations_module else {}
instructions = instructions_module.get_chatbot_instructions() if instructions_module else ""



def analyze_question(question: str, client_type: str, urgency: str) -> Tuple[str, str, float, bool]:
    options = [f"{domaine}: {', '.join(prestations_domaine['prestations'].keys())}" for domaine, prestations_domaine in prestations.items()]
    prompt = f"""Analysez la question suivante et d√©terminez si elle concerne un probl√®me juridique. Si c'est le cas, identifiez le domaine juridique et la prestation la plus pertinente.

Question : {question}
Type de client : {client_type}
Degr√© d'urgence : {urgency}

Options de domaines et prestations :
{' '.join(options)}

R√©pondez au format JSON strict suivant :
{{
    "est_juridique": true/false,
    "domaine": "nom du domaine juridique",
    "prestation": "nom de la prestation (pas le label)",
    "explication": "Br√®ve explication de votre analyse",
    "indice_confiance": 0.0 √† 1.0
}}
"""

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": instructions},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3,
            max_tokens=500
        )
        result = json.loads(response.choices[0].message.content)
        
        domain = result['domaine']
        service = result['prestation']
        confidence = result['indice_confiance']
        is_relevant = result['est_juridique'] and domain in prestations and service in prestations[domain]['prestations']
        
        logger.info(f"Domaine identifi√© : {domain}")
        logger.info(f"Prestation identifi√©e : {service}")
        
        return domain, service, confidence, is_relevant
    except Exception as e:
        logger.error(f"Erreur lors de l'analyse de la question: {e}")
        return "", "", 0.0, False

def check_response_relevance(response: str, options: list) -> bool:
    response_lower = response.lower()
    return any(option.lower().split(':')[0].strip() in response_lower for option in options)

def calculate_estimate(domaine: str, prestation: str, urgency: str) -> Tuple[int, int, list, Dict[str, Any], str, str]:
    try:
        # R√©cup√©rer les prestations pour le domaine sp√©cifi√©
        domaine_info = prestations.get(domaine)
        if not domaine_info:
            logger.error(f"Domaine non trouv√© : {domaine}")
            return None, None, [f"Aucun domaine trouv√© pour : {domaine}"], {}, "", ""

        prestations_domaine = domaine_info.get('prestations', {})
        prestation_info = prestations_domaine.get(prestation)
        if not prestation_info:
            logger.error(f"Prestation non trouv√©e : {prestation} dans le domaine {domaine}")
            available_prestations = ", ".join(prestations_domaine.keys())
            return None, None, [f"Prestation '{prestation}' non trouv√©e dans le domaine '{domaine}'. Prestations disponibles : {available_prestations}"], {}, "", ""

        forfait = prestation_info.get('tarif')
        if not forfait:
            logger.error(f"Aucun tarif d√©fini pour la prestation : {prestation}")
            return None, None, [f"Aucun forfait d√©fini pour la prestation : {prestation}"], {}, "", ""

        calcul_details = [
            f"Forfait pour la prestation '{prestation_info['label']}': {forfait} ‚Ç¨"
        ]

        # D√©finir directement le facteur d'urgence ici
        facteur_urgence = 1.5  # Vous pouvez ajuster cette valeur selon vos besoins

        if urgency == "Urgent":
            forfait_urgent = round(forfait * facteur_urgence)
            calcul_details.extend([
                f"Facteur d'urgence appliqu√©: x{facteur_urgence}",
                f"Forfait apr√®s application du facteur d'urgence: {forfait_urgent} ‚Ç¨"
            ])
            forfait = forfait_urgent

        tarifs_utilises = {
            "forfait_prestation": forfait,
            "facteur_urgence": facteur_urgence if urgency == "Urgent" else "Non appliqu√©"
        }

        domaine_label = domaine_info['label']
        prestation_label = prestation_info['label']

        return forfait, forfait, calcul_details, tarifs_utilises, domaine_label, prestation_label
    except Exception as e:
        logger.exception(f"Erreur dans calculate_estimate: {str(e)}")
        return None, None, [f"Erreur lors du calcul de l'estimation : {str(e)}"], {}, "", ""

def get_detailed_analysis(question: str, client_type: str, urgency: str, domaine: str, prestation: str) -> Tuple[str, Dict[str, Any], str]:
    prompt = f"""En tant qu'assistant juridique virtuel pour View Avocats, analysez la question suivante et expliquez votre raisonnement pour le choix du domaine juridique et de la prestation.

Question : {question}
Type de client : {client_type}
Degr√© d'urgence : {urgency}
Domaine recommand√© : {domaine}
Prestation recommand√©e : {prestation}

Structurez votre r√©ponse en trois parties clairement s√©par√©es par des lignes vides :

1. Analyse d√©taill√©e :
Fournissez une analyse concise mais d√©taill√©e du cas, en tenant compte du type de client et du degr√© d'urgence.

2. √âl√©ments sp√©cifiques utilis√©s (format JSON strict) :
{{"domaine": {{"nom": "nom_du_domaine", "description": "description_du_domaine"}}, "prestation": {{"nom": "nom_de_la_prestation", "description": "description_de_la_prestation"}}}}

3. Sources d'information :
Listez les sources d'information utilis√©es pour cette analyse, si applicable.

Assurez-vous que chaque partie est clairement s√©par√©e et que le JSON dans la partie 2 est valide et strict."""

    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": instructions},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3,
            max_tokens=1000
        )
        content = response.choices[0].message.content.strip()
        logger.info(f"R√©ponse brute de l'API : {content}")

        parts = content.split('\n\n')
        
        analysis = parts[0] if len(parts) > 0 else "Analyse non disponible."
        
        elements_used = {}
        if len(parts) > 1:
            try:
                json_part = next((part for part in parts if '{' in part and '}' in part), None)
                if json_part:
                    json_str = json_part[json_part.index('{'):json_part.rindex('}')+1]
                    elements_used = json.loads(json_str)
                else:
                    logger.warning("Aucun JSON valide trouv√© dans la r√©ponse.")
                    elements_used = {
                        "domaine": {"nom": domaine, "description": "Information non fournie par l'API"},
                        "prestation": {"nom": prestation, "description": "Information non fournie par l'API"}
                    }
            except json.JSONDecodeError as e:
                logger.error(f"Erreur de d√©codage JSON : {e}")
                elements_used = {
                    "domaine": {"nom": domaine, "description": "Erreur dans l'analyse de la r√©ponse"},
                    "prestation": {"nom": prestation, "description": "Erreur dans l'analyse de la r√©ponse"}
                }
        else:
            elements_used = {
                "domaine": {"nom": domaine, "description": "Information non disponible"},
                "prestation": {"nom": prestation, "description": "Information non disponible"}
            }
        
        sources = parts[2] if len(parts) > 2 else "Aucune source sp√©cifique mentionn√©e."

        return analysis, elements_used, sources
    except Exception as e:
        logger.exception(f"Erreur lors de l'analyse d√©taill√©e : {e}")
        return "Une erreur s'est produite lors de l'analyse.", {
            "domaine": {"nom": domaine, "description": "Erreur dans l'analyse"},
            "prestation": {"nom": prestation, "description": "Erreur dans l'analyse"}
        }, "Non disponible en raison d'une erreur."

def display_analysis_progress():
    """
    Affiche une barre de progression avec les √©tapes de l'analyse
    """
    progress_placeholder = st.empty()
    
    steps = {
        1: "Analyse de votre demande...",
        2: "Identification du domaine juridique...",
        3: "Calcul de l'estimation...",
        4: "G√©n√©ration du rapport d'analyse..."
    }
    
    for step_num, step_desc in steps.items():
        progress = step_num / len(steps)
        with progress_placeholder.container():
            st.progress(progress)
            st.write(f"‚è≥ {step_desc}")
        time.sleep(0.8)  # D√©lai entre chaque √©tape
    
    progress_placeholder.empty()

def send_contact_email(name: str, email: str, phone: str, message: str) -> bool:
    """
    Envoie un email de contact
    """
    try:
        from_email = os.getenv('EMAIL_FROM')
        to_email = st.secrets["EMAIL_TO"]
        password = os.getenv('EMAIL_PASSWORD')

        subject = f"Nouveau message de contact - Estim'IA"
        
        body = f"""
Nouveau message de contact re√ßu via Estim'IA :

Nom : {name}
Email : {email}
T√©l√©phone : {phone}

Message :
{message}
"""

        msg = MIMEMultipart()
        msg['From'] = from_email
        msg['To'] = to_email
        msg['Subject'] = subject
        msg.attach(MIMEText(body, 'plain'))

        with smtplib.SMTP('smtp.gmail.com', 587) as server:
            server.starttls()
            server.login(from_email, password)
            server.send_message(msg)
            
        logger.info(f"Contact email sent from {email}")
        return True
        
    except Exception as e:
        logger.error(f"Failed to send contact email: {str(e)}")
        return False

class AntiSpam:
    def __init__(self, min_submit_delay: int = 10):
        self.min_submit_delay = min_submit_delay

    def generate_math_captcha(self) -> Tuple[int, int, int]:
        """G√©n√®re un captcha math√©matique simple"""
        a = random.randint(1, 10)
        b = random.randint(1, 10)
        return a, b, a + b

    def initialize_session(self):
        """Initialise les variables de session pour l'anti-spam"""
        if 'captcha' not in st.session_state:
            a, b, answer = self.generate_math_captcha()
            st.session_state.captcha = {
                'a': a,
                'b': b,
                'answer': answer
            }
        if 'last_submit_time' not in st.session_state:
            st.session_state.last_submit_time = 0

    def add_honeypot(self):
        """Ajoute un champ honeypot cach√©"""
        st.markdown("""
            <div style="display:none">
                <input type="text" name="website" id="website" tabindex="-1" autocomplete="off">
            </div>
        """, unsafe_allow_html=True)

    def verify_submission(self, captcha_answer: str, honeypot: str = '') -> Tuple[bool, str]:
        """
        V√©rifie si la soumission est l√©gitime
        Retourne (is_valid, error_message)
        """
        current_time = time.time()
        
        # V√©rifier le d√©lai minimum entre les soumissions
        if current_time - st.session_state.last_submit_time < self.min_submit_delay:
            return False, "Veuillez patienter quelques secondes avant de renvoyer un message."

        # V√©rifier le honeypot
        if honeypot:
            return False, "Erreur de validation."

        # V√©rifier le captcha
        try:
            if int(captcha_answer) != st.session_state.captcha['answer']:
                return False, "La r√©ponse au calcul est incorrecte."
        except ValueError:
            return False, "Veuillez entrer un nombre valide pour le calcul."

        # Mettre √† jour le timestamp de derni√®re soumission
        st.session_state.last_submit_time = current_time
        return True, ""

def display_contact_form():
    """
    Affiche et g√®re le formulaire de contact avec protection anti-spam
    """
    st.markdown("### üì¨ Contactez-nous")
    st.write("""
    Vous souhaitez plus d'informations ou prendre rendez-vous ? 
    Remplissez le formulaire ci-dessous et nous vous recontacterons dans les plus brefs d√©lais.
    """)
    
    # Initialiser l'anti-spam
    anti_spam = AntiSpam()
    anti_spam.initialize_session()
    
    # CSS pour cacher compl√®tement le honeypot
    st.markdown("""
        <style>
            #honeypot { display: none !important; }
        </style>
    """, unsafe_allow_html=True)

    # Container pour le message de succ√®s
    success_message = st.empty()
    
    # Cr√©er le formulaire
    with st.form(key="contact_form"):
        # Cr√©ation de deux colonnes principales
        form_col1, form_col2 = st.columns([1, 1])
        
        with form_col1:
            name = st.text_input("Nom et Pr√©nom *")
            email = st.text_input("Email *")
            phone = st.text_input("T√©l√©phone")
            # Captcha sur une ligne
            st.text_input(f"{st.session_state.captcha['a']} + {st.session_state.captcha['b']} = ", 
                         key="captcha_input", 
                         label_visibility="visible",
                         max_chars=3)
            
            # Honeypot vraiment invisible
            st.markdown("""
                <div id="honeypot" style="display:none;">
                    <input type="text" name="website" value="">
                </div>
            """, unsafe_allow_html=True)
            honeypot = st.session_state.get('website', '')
        
        with form_col2:
            message = st.text_area(
                "Votre message *",
                height=200,
                placeholder="D√©crivez bri√®vement votre situation et vos attentes..."
            )
        
        # Bouton de soumission
        submit_button = st.form_submit_button("Envoyer le message")
    
    if submit_button:
        captcha_answer = st.session_state.captcha_input
        
        # V√©rifier les champs obligatoires
        if not name or not email or not message or not captcha_answer:
            st.error("Veuillez remplir tous les champs obligatoires (*)")
            return
        
        if "@" not in email or "." not in email:
            st.error("Veuillez entrer une adresse email valide")
            return
        
        # V√©rifier l'anti-spam
        is_valid, error_message = anti_spam.verify_submission(captcha_answer, honeypot)
        if not is_valid:
            st.error(error_message)
            return
            
        # Envoyer le message
        with st.spinner("Envoi de votre message..."):
            success = send_contact_email(name, email, phone, message)
            
        if success:
            success_message.success("‚úÖ Message envoy√©")
        else:
            st.error("""
            ‚ùå Une erreur est survenue lors de l'envoi du message. 
            Veuillez r√©essayer ou nous contacter directement par t√©l√©phone.
            """)

def get_dynamic_client_type_fields():
    """
    G√®re les champs dynamiques selon le type de client
    Retourne un dictionnaire avec toutes les informations collect√©es
    """
    client_info = {}
    
    client_type = st.selectbox("Vous √™tes :", ("Particulier", "Professionnel"))
    client_info["type_principal"] = client_type
    
    if client_type == "Professionnel":
        sub_type = st.selectbox(
            "Type d'organisation :",
            [
                "Entreprise",
                "Profession lib√©rale",
                "Association",
                "Administration",
                "Collectivit√©"
            ]
        )
        client_info["sous_type"] = sub_type
        
        if sub_type == "Entreprise":
            client_info["taille"] = st.selectbox(
                "Taille de l'entreprise :",
                [
                    "TPE (moins de 10 salari√©s)",
                    "PME (10 √† 250 salari√©s)",
                    "ETI (250 √† 5000 salari√©s)",
                    "Grande entreprise"
                ]
            )
            
        if sub_type in ["Entreprise", "Profession lib√©rale"]:
            client_info["secteur"] = st.selectbox(
                "Secteur d'activit√© :",
                [
                    "Commerce",
                    "Services",
                    "Industrie",
                    "BTP",
                    "Tech",
                    "Autre"
                ]
            )
    
    return client_info

def main():
    apply_custom_css()
    
    st.title("üèõÔ∏è Estim'IA by View Avocats\nObtenez une premi√®re estimation du prix de nos services en quelques secondes gr√¢ce √† l'IA")

    # Initialisation du compteur de keep-alive dans la session state
    if 'last_keep_alive' not in st.session_state:
        st.session_state['last_keep_alive'] = time.time()

    # V√©rification et mise √† jour du keep-alive
    current_time = time.time()
    if current_time - st.session_state['last_keep_alive'] > 3540:  # 59 minutes
        st.session_state['last_keep_alive'] = current_time
        st.rerun()

    # Collecte des informations client avec les champs dynamiques
    client_info = get_dynamic_client_type_fields()
    urgency = st.selectbox("Degr√© d'urgence :", ("Normal", "Urgent"))

    exemple_cas = """Exemple : Mon voisin a construit une extension de sa maison qui empi√®te de 50 cm sur mon terrain. J'ai essay√© de lui en parler √† l'amiable, mais il refuse de reconna√Ætre le probl√®me. Je souhaite conna√Ætre mes droits et les d√©marches possibles pour r√©soudre cette situation, si possible sans aller jusqu'au proc√®s."""

    question = st.text_area(
        "Expliquez bri√®vement votre cas, notre intelligence artificielle s'occupe du reste !",
        height=150,
        placeholder=exemple_cas
    )

    if st.button("Obtenir une estimation gr√¢ce √† l'intelligence artificielle"):
        # V√©rification des limites
        peut_continuer_global, requetes_restantes = check_global_limit()
        if not peut_continuer_global:
            st.error(f"""
            ‚ö†Ô∏è Le nombre maximum de requ√™tes global a √©t√© atteint pour le moment.
            Le syst√®me sera √† nouveau disponible dans {requetes_restantes} minutes.
            Pour une analyse urgente, vous pouvez nous contacter directement.
            """)
            return

        peut_continuer, temps_attente = rate_limiter.check_limit(get_session_id())
        if not peut_continuer:
            st.warning(f"""
            ‚è≥ Merci de patienter {temps_attente} minute{'s' if temps_attente > 1 else ''} avant de faire une nouvelle demande.
            Pour une analyse urgente, vous pouvez nous contacter directement.
            """)
            return

        if question and question != exemple_cas:
            progress_container = st.empty()
            
            with progress_container:
                # Afficher la progression √† la place du spinner
                display_analysis_progress()
                
                # Pr√©paration des informations client pour l'analyse
                client_type_desc = f"{client_info['type_principal']}"
                if client_info['type_principal'] == "Professionnel":
                    client_type_desc += f" - {client_info['sous_type']}"
                    if 'taille' in client_info:
                        client_type_desc += f" ({client_info['taille']})"
                    if 'secteur' in client_info:
                        client_type_desc += f" - Secteur {client_info['secteur']}"
                
                # Analyse avec timeout
                result, timeout = execute_with_timeout(
                    analyze_question,
                    question,
                    client_type_desc,
                    urgency,
                    timeout_seconds=30
                )
                
                if timeout:
                    progress_container.empty()
                    st.error("D√©sol√©, l'analyse a pris trop de temps. Veuillez r√©essayer ou nous contacter directement.")
                    return
                    
                domaine, prestation, confidence, is_relevant = result
                
                if not domaine or not prestation:
                    progress_container.empty()
                    st.error("D√©sol√©, nous n'avons pas pu analyser votre demande. Veuillez r√©essayer avec plus de d√©tails.")
                    return

                detailed_analysis, elements_used, sources = get_detailed_analysis(
                    question, client_type_desc, urgency, domaine, prestation
                )

                # Calcul de l'estimation
                forfait, _, calcul_details, tarifs_utilises, domaine_label, prestation_label = calculate_estimate(
                    domaine, prestation, urgency
                )

                # Logging
                if forfait is not None:
                    estimation = {
                        'forfait': forfait,
                        'domaine': domaine_label,
                        'prestation': prestation_label
                    }
                    log_question(question, client_type_desc, urgency, estimation)
                else:
                    log_question(question, client_type_desc, urgency)

                if forfait is None:
                    progress_container.empty()
                    st.warning("Nous n'avons pas pu trouver un forfait pr√©cis pour cette prestation. Voici les d√©tails :")
                    for detail in calcul_details:
                        st.write(detail)
                    st.info("Pour obtenir une estimation pr√©cise, veuillez nous contacter directement.")
                    return

                # Vider le container de progression
                progress_container.empty()
                
                # Container principal pour les r√©sultats
                with st.container():
                    # 1. R√©sum√© de l'analyse
                    st.info(f"""
                    üìã Notre compr√©hension de votre situation :
                    
                    {detailed_analysis}
                    
                    Sur la base de cette analyse, nous allons maintenant vous proposer une estimation adapt√©e √† votre situation.
                    """)

                    # 2. Estimation
                    st.markdown(f"""
                    <div style="background-color: #f0f2f6; padding: 20px; border-radius: 10px; text-align: center;">
                        <h2 style="color: #1f618d;">Forfait estim√©</h2>
                        <p style="font-size: 24px; font-weight: bold; color: #2c3e50;">
                            √Ä partir de <span style="color: #e74c3c;">{forfait} ‚Ç¨HT</span>
                        </p>
                        <p style="font-style: italic;">Domaine : {domaine_label}</p>
                        <p style="font-style: italic;">Prestation : {prestation_label}</p>
                    </div>
                    """, unsafe_allow_html=True)

                    st.info("""
                    üìå Note importante : Cette estimation est fournie √† titre indicatif et peut varier en fonction de la complexit√© sp√©cifique de votre situation. 
                    Nous vous invitons √† nous contacter pour une √©valuation personnalis√©e qui prendra en compte tous les d√©tails de votre cas. Pour les particuliers, il est possible de payer en plusieurs fois.
                    """)

                    st.markdown("---")

                    # 3. Indicateurs de confiance et avertissements
                    col1, col2 = st.columns([1, 2])
                    with col1:
                        st.subheader("Indice de confiance")
                        st.progress(confidence)
                        st.write(f"Confiance : {confidence:.2%}")
                    with col2:
                        if confidence < 0.5:
                            st.warning("‚ö†Ô∏è Attention : Notre IA a eu des difficult√©s √† analyser votre question avec certitude. L'estimation ci-dessus peut manquer de pr√©cision.")
                        elif not is_relevant:
                            st.info("Nous ne sommes pas s√ªr qu'il s'agisse d'une question d'ordre juridique. L'estimation ci-dessus est fournie √† titre indicatif.")

                    # 4. Recommandations
                    st.markdown("### üí° Recommandations")
                    st.success("""
                    **Consultation initiale recommand√©e** - Pour une analyse approfondie de votre situation et des conseils personnalis√©s, 
                    nous vous recommandons de prendre rendez-vous pour une consultation initiale d'un montant de 200‚Ç¨HT. Cette premi√®re analyse de votre situation nous permettra de :
                    - √âvaluer pr√©cis√©ment la complexit√© de votre cas
                    - Vous fournir des conseils juridiques adapt√©s
                    - √âlaborer une strat√©gie sur mesure pour votre situation
                    """)

                    st.markdown("---")

                    # 5. D√©tails dans des colonnes
                    details_col1, details_col2 = st.columns(2)
                    
                    with details_col1:
                        st.subheader("D√©tails du forfait")
                        for detail in calcul_details:
                            st.write(detail)

                    with details_col2:
                        if isinstance(elements_used, dict) and "prestation" in elements_used:
                            st.subheader("Proc√©dure sugg√©r√©e")
                            st.write(elements_used['prestation'].get('description', 'Non sp√©cifi√©'))

                    # 6. Informations suppl√©mentaires
                    if sources and sources != "Aucune source sp√©cifique mentionn√©e.":
                        with st.expander("Sources juridiques"):
                            st.write(sources)

        else:
            st.warning("Veuillez d√©crire votre cas avant de demander une estimation. N'utilisez pas l'exemple fourni tel quel.")
    
    st.markdown("---")
    display_contact_form()
    
    st.markdown("---")
    st.empty()
    st.write("¬© 2024 View Avocats. Tous droits r√©serv√©s.")

if __name__ == "__main__":
    main()
